{{ if eq .chezmoi.os "darwin" -}}
# Brew autocomplete
if command -v brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH

  autoload -Uz compinit
  compinit
fi

# GCC
# alias cc="/opt/homebrew/Cellar/gcc/11.3.0_2"
# ln -s =/opt/homebrew/Cellar/gcc/11.3.0_2/bin/gcc-11 /usr/local/bin/cc

# NOTE
# If Neorg is having problems installing, use
# CC=/opt/homebrew/Cellar/gcc/12.1.0/bin/gcc-12 nvim
# and once in, `:TSInstall norg`

# Python
export PATH=/usr/local/bin:/usr/local/sbin:$PATH

# Ripgrep
export RIPGREP_CONFIG_PATH=$HOME/.config/ripgrep/ripgreprc

# Ruby
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

# Adding opt for binaries installed by Homebrew
export PATH=/usr/local/opt/:$PATH
{{- else if eq .chezmoi.os "linux" -}}
# Snap
if [ -s "/snap/bin" ]; then
  export PATH="/snap/bin:$PATH"
fi
{{- end }}

# Zig
if [ -d "$HOME"/Downloads/zig-linux-x86_64-0.10.0-dev.3880+e2bb92b2e:"$PATH" ]
then
  export PATH="$HOME/Downloads/zig-linux-x86_64-0.10.0-dev.3880+e2bb92b2e:$PATH"
fi

##########################################
#             Path Addendums
##########################################

# Set editor to either neovim or vim
if [ -n "$(command -v nvim)" ]
then
  export EDITOR=nvim
  alias v="nvim"
  alias vpu="nvim +PlugUpgrade +PlugUpdate +qa"
else
  echo "neovim not installed!"
  export EDITOR=vim
  alias v="vim"
  alias vpu="vim +PlugUpgrade +PlugUpdate +qa"
fi

# local bin
if [ -d "$HOME/.local" ]
then
  export PATH="$HOME/.local/bin:$PATH"
fi

# my scripts
export PATH="$HOME/dotfiles/scripts:$PATH"

##########################################
#             Aliases
##########################################

# Useful Commands
alias rm="rm -i" # always ask, just in case
alias cg="curl -i -H "Accept: application/json" -H "Content-Type: application/json" -X GET"
alias pms="ps -ax -u $(whoami) -o pid,command,state,lstart,etime,time,%cpu,%mem"

# ls with colors!
{{ if eq .chezmoi.os "darwin" }}
alias ls="ls -aFG" # list hidden files; add colors and file type
{{ else }}
alias ls="ls -aF --color" # list hidden files; add colors and file type
alias wifiSearch="sudo iw dev wlp2s0 scan | less -pSSID"
{{ end }}

# Git shortcuts
alias gbr="git branch --sort=-committerdate | head -5"
alias gf="git fetch"
alias gfarm="gcm; git fetch && git rebase origin/main"
alias gp="git push"
alias gm="git merge"
alias grh="git reset --hard"
alias grm="git rebase main"
alias gcp="git cherry-pick"

gcm() {
  branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
  git checkout "$branch"
}

# Python Simple server in current dir
alias simp="python -m SimpleHTTPServer 8000"

# Homebrew - for M1
alias brewm1="arch -x86_64 brew"

##########################################
#             FZF
##########################################
if [ -n "$(command -v fzf)" ]
then
# Set fzf to use ag
  if [ -n "$(command -v ag)" ]
  then
    export FZF_DEFAULT_COMMAND="ag -p ~/dotfiles/.ignore -g ''"
    export FZF_CTRL_T_COMMAND="ag -p ~/dotfiles/.ignore -g ''"
  else
    echo "ag not installed!"
  fi

  _fzf_compgen_path() {
    ag -p ~/dotfiles/.ignore -g ''
  }

  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude '.git' . "$1"
  }
fi

##########################################
#             LF
#########################################
# LF
if [ -n "$(command -v lf)" ]
then
  # For what the keys mean, check out https://github.com/gokcehan/lf/blob/aebff483a79edbde020a63816acbceb3278ed3e6/icons.go#L79
  export LF_ICONS="ln=:di=:fi=:ex=:*.html=:*.js=:*.jsx=:*.ts=:*.tsx=:*.json=ﬥ:*.rb=:*.hs=:*.norg=:*.vim=:*.vimrc:*.lua=:*.*rc=:Dockerfile=:"

  LFCD="$HOME/.config/lf/lfcd.sh"
  . "$LFCD"
  alias lf="lfcd"
fi

##########################################
#             Helpful
##########################################
export HISTCONTROL=ignoredups

{{ if eq .chezmoi.os "darwin" -}}
# @description Calls the given function and alerts on success or error.
# The alert is a macOS notification alert, like a pop up.
# For when running a lengthy process and you want to look away.
# @arg $@ string[] Whatever function to be called with whatever parameters
# @example
#   notify_when_done npm install
function notify_when_done() {
  "$@" || osascript -e 'display alert "Oh no!" message "Something dun gon goofd up! Check your terminal."'
  osascript -e 'display alert "Process finished!" message "check your terminal"'
}
{{- end }}

##########################################
#             For fun :)
##########################################
# Launch an aquarium on startup on non tmux!
if [ -z "$TMUX" ] && [ "$(command -v asciiquarium)" ]
then
  asciiquarium
fi
